@model VRRailRoadEditor.ViewModels.HomeIndexViewModel
<!--
<div class="row employee-benefits-homepage-icon-row">
	<div class="col-xl-3 col-sm-6 mb-3">
		<div class="card text-white bg-primary o-hidden h-100">
			<div class="card-body">
				<div class="card-body-icon">
					<i class="fa fa-fw fa-dollar"></i>
				</div>
				<div class="span6">
					Gross Yearly Employee Compensation
				</div>
				<div class="span6">
					<div class="pull-right">
						@Model.GrossEmployeeCompensation
					</div>
				</div>
				<div class="mr-5"></div>
				<div class="mr-5"></div>
			</div>
			<a class="card-footer text-white clearfix small z-1" href="#">
				<span class="float-right">For @Model.NumberOfEmployees Employees</span>
			</a>
		</div>
	</div>
	<div class="col-xl-3 col-sm-6 mb-3">
		<div class="card text-white bg-warning o-hidden h-100">
			<div class="card-body">
				<div class="card-body-icon">
					<i class="fa fa-fw fa-child"></i>
				</div>
				<div class="span6">Yearly Employee Benefits</div>
				<div class="span6">
					<div class="pull-right">
						@Model.TotalEmployeeBenefits
					</div>
				</div>
			</div>
			<a class="card-footer text-white clearfix small z-1" href="#">
				<span class="float-right">For @Model.NumberOfEmployees Employees and @Model.NumberOfDependents Unique Dependents</span>
			</a>
		</div>
	</div>
</div>

<div class="card-body">
	<div class="h1">
		<h1>Welcome to the Employee Management Sample App!</h1>
	</div>
	<p>
		You may use this sample app to input employees and their dependents, and get an immediate preview of projected costs and deductions.
	</p>
	<div class="row employee-benefits-button-row">
			<a href="@Url.Action("input", "employee")">
				<button type="button" class="btn btn-primary " aria-label="Get Started!">
					Enter New Employee And New Dependents
				</button>
			</a>
			<a href="@Url.Action("input", "dependent")">
				<button type="button" class="btn btn-primary " aria-label="Get Started!">
					Enter New Dependent For An Existing Employee
				</button>
			</a>
	</div>
</div>

<div class="card mb-3">
	<div class="card-header">
		<i class="fa fa-table"></i> Employees
	</div>
	
	<div class="card-body">
		<div class="table-responsive">
			<table class="table table-bordered" id="dataTable" cellspacing="0">
				<thead>
					<tr>
						<th>Name</th>
						<th>Paycheck</th>
						<th>Standard Benefits (for employee only)</th>
						<th>Benefits Discount (for employee only)</th>
						<th>Number of Dependents</th>
						<th>Standard Dependent Benefits</th>
						<th>Discount By Dependent</th>
						<th>Total Benefits Per Paycheck</th>
						<th>Adjusted Paycheck</th>
						<th>Yearly Benefits Deduction</th>
						<th>Adjusted Yearly Salary</th>
					</tr>
				</thead>
				<tbody>
					
					@foreach (var employee in Model.Employees)
					{
					<tr>
						<td>@employee.Name</td>
						<td>@employee.CompensationPerPaycheckFormatted</td>
						<td>@employee.BaseCostOfBenefitsFormatted()</td>
						<td>@employee.BenefitsDiscountPercentage()% off</td>
						<td>@employee.NumberOfDependents</td>
						<td>@employee.BaseCostOfDependentBenefitsFormatted()</td>
						<td>
						@foreach (var summary in employee.BenefitsDiscountSummary())
						{
							<p>@summary</p>
						}
						</td>
						<td>@employee.BenefitsPerPaycheckFormatted</td>
						<td>@employee.NetCostPerPaycheckFormatted</td>
						<td>@employee.AnnualBenefitsDiscountFormatted</td>
						<td>@employee.NetCostFormatted</td>
					</tr>
					}
					
				</tbody>
			</table>
		</div>
	</div>
	<div class="card-footer small text-muted">All currency amounts are in USD.</div>
	<div class="result"></div>
</div>-->

<div id="content">
	<div id="output">
		<!--<canvas id="canvas"></canvas>-->
		<canvas id="maincanvas" width="900" height="500"></canvas>
	</div>
	<div id="input">
		<div id="editor">
		</div>
	</div>
</div>





@section Scripts {


	<script src="~/js/isomer.min.js"></script>
	<script src="~/js/ace.js"></script>
	<script src="~/js/loop-protect.js"></script>
	<script src="~/js/playground_script.js"></script>
	<!--<script>

		

		// Declare the ACE editor
		var editor = ace.edit("editor");
		editor.getSession().setMode("ace/mode/javascript");
		editor.getSession().setUseWorker(false);

		document.addEventListener("DOMContentLoaded", function () {
			// Explicitly declare the width and height of the canvas
			var container = document.getElementById("output");
			var canvas = document.getElementById("canvas");

			var width = container.offsetWidth;
			var height = container.offsetHeight;

			canvas.style.width = width + "px";
			canvas.style.height = height + "px";

			// 2x for retina displays
			canvas.width = 2 * width;
			canvas.height = 2 * height;

			var scratch = new Scratchpad(editor, canvas);
			// Load from localStorage
			scratch.load();

			// Listen for changes in the editor and execute them
			scratch.run();

			editor.gotoLine(editor.session.getLength());
		});
	</script> -->

	<script src="~/js/sheetengine.js"></script>
	<script type="text/javascript">

		jQuery();

		var canvasElement = document.getElementById('maincanvas');
		sheetengine.scene.init(canvasElement, { w: 900, h: 500 });

		// define some basesheets
		for (var x = -1; x <= 1; x++) {
			for (var y = -1; y <= 1; y++) {
				var basesheet = new sheetengine.BaseSheet({ x: x * 200, y: y * 200, z: 0 }, { alphaD: 90, betaD: 0, gammaD: 0 }, { w: 200, h: 200 });
				basesheet.color = '#5D7E36';
			}
		}

		// define a selectable object
		var sheet1 = new sheetengine.Sheet({ x: 0, y: 10, z: 10 }, { alphaD: 0, betaD: 0, gammaD: 0 }, { w: 20, h: 20 });
		sheet1.context.fillStyle = '#FFF';
		sheet1.context.fillRect(0, 0, 20, 20);
		var sheet2 = new sheetengine.Sheet({ x: 10, y: 0, z: 10 }, { alphaD: 0, betaD: 0, gammaD: 90 }, { w: 20, h: 20 });
		sheet2.context.fillStyle = '#FFF';
		sheet2.context.fillRect(0, 0, 20, 20);
		var sheet3 = new sheetengine.Sheet({ x: 0, y: 0, z: 20 }, { alphaD: 90, betaD: 0, gammaD: 0 }, { w: 20, h: 20 });
		sheet3.context.fillStyle = '#FFF';
		sheet3.context.fillRect(0, 0, 20, 20);

		var obj = new sheetengine.SheetObject({ x: 0, y: -150, z: 0 }, { alpha: 0, beta: 0, gamma: 0 }, [sheet1, sheet2, sheet3], { w: 40, h: 40, relu: 20, relv: 30 });




		// function for creating a character with a body and 2 legs
		function defineCharacter(centerp) {
			// character definition for animation with sheet motion
			var body = new sheetengine.Sheet({ x: 0, y: 0, z: 15 }, { alphaD: 0, betaD: 0, gammaD: 0 }, { w: 11, h: 14 });
			var backhead = new sheetengine.Sheet({ x: 0, y: -1, z: 19 }, { alphaD: 0, betaD: 0, gammaD: 0 }, { w: 8, h: 6 });
			backhead.context.fillStyle = '#550';
			backhead.context.fillRect(0, 0, 8, 6);
			// legs
			var leg1 = new sheetengine.Sheet({ x: -3, y: 0, z: 4 }, { alphaD: 0, betaD: 0, gammaD: 0 }, { w: 5, h: 8 });
			leg1.context.fillStyle = '#00F';
			leg1.context.fillRect(0, 0, 5, 10);
			var leg2 = new sheetengine.Sheet({ x: 3, y: 0, z: 4 }, { alphaD: 0, betaD: 0, gammaD: 0 }, { w: 5, h: 8 });
			leg2.context.fillStyle = '#00F';
			leg2.context.fillRect(0, 0, 5, 10);

			// define character object
			var character = new sheetengine.SheetObject(centerp, { alphaD: 0, betaD: 0, gammaD: 90 }, [body, backhead, leg1, leg2], { w: 70, h: 110, relu: 10, relv: 25 });

			character.leg1 = leg1;
			character.leg2 = leg2;

			var ctx = body.context;

			// head
			ctx.fillStyle = '#FF0';
			ctx.fillRect(2, 2, 7, 4);
			ctx.fillStyle = '#550';
			ctx.fillRect(2, 0, 7, 2);
			ctx.fillRect(2, 2, 1, 1);
			ctx.fillRect(8, 2, 1, 1);

			// body
			ctx.fillStyle = '#F0F';
			ctx.fillRect(0, 6, 11, 7);

			// hands
			ctx.fillStyle = '#FF0';
			ctx.fillRect(0, 11, 1, 2);
			ctx.fillRect(10, 11, 1, 2);

			character.animationState = 0;
			return character;
		};

		// function for animating character's sheets
		function animateCharacter(character) {
			var state = Math.floor((character.animationState % 8) / 2);
			var dir = (state == 0 || state == 3) ? 1 : -1;

			character.rotateSheet(character.leg1, { x: 0, y: 0, z: 8 }, { x: 1, y: 0, z: 0 }, dir * Math.PI / 8);
			character.rotateSheet(character.leg2, { x: 0, y: 0, z: 8 }, { x: 1, y: 0, z: 0 }, -dir * Math.PI / 8);
		}

		// define a character
		var character = defineCharacter({ x: 110, y: 0, z: 0 });

		// draw initial scene
		sheetengine.calc.calculateAllSheets();
		sheetengine.drawing.drawScene(true);

		var target = null;
		var hover = false;
		var scenechanged = false;

		// mouse events
		canvasElement.onclick = function (event) {
			// get the click coordinates
			var puv = {
				u: event.clientX - sheetengine.canvas.offsetLeft,
				v: event.clientY - sheetengine.canvas.offsetTop
			};

			// check if the object has been clicked
			if (hover) {
				hover = false;
				// move object to a random position
				obj.setPosition({ x: Math.random() * 500 - 250, y: Math.random() * 500 - 250, z: 0 });
				scenechanged = true;
				return;
			}

			// transform coordinates to world coordinate system
			var pxy = sheetengine.transforms.inverseTransformPoint({
				u: puv.u + sheetengine.scene.center.u,
				v: puv.v + sheetengine.scene.center.v
			});

			// calculate rotation angle
			var angle = -Math.atan2(pxy.y - character.centerp.y, pxy.x - character.centerp.x) + Math.PI / 2;

			// set target position for character
			target = pxy;
			scenechanged = true;

			// sets absolute orientation with respect to initial pos object from initial pos
			character.setOrientation({ alpha: 0, beta: 0, gamma: angle });
		}
		canvasElement.onmousemove = function (event) {
			// get the hover coordinates
			var puv = {
				u: event.clientX - sheetengine.canvas.offsetLeft,
				v: event.clientY - sheetengine.canvas.offsetTop
			};

			// check if the object has been hovered
			var objhovered = isObjectHovered(puv);
			if (objhovered != hover)
				scenechanged = true;
			hover = objhovered;
		}

		function isObjectHovered(puv) {
			var ouv = sheetengine.drawing.getPointuv(obj.centerp);
			if (puv.u > ouv.u - 20 &&
				puv.u < ouv.u - 20 + 40 &&
				puv.v > ouv.v - 30 &&
				puv.v < ouv.v - 30 + 40)
				return true;

			return false;
		}


		// main loop
		function mainloop() {
			var move = 0;
			if (target) {
				if (Math.abs(target.x - character.centerp.x) > 5 || Math.abs(target.y - character.centerp.y) > 5)
					move = 5;
			}

			if (move) {
				// calculate resulting displacement from orientation of user
				var angle = character.rot.gamma;
				var dx = Math.sin(angle) * move;
				var dy = Math.cos(angle) * move;

				// move character to target point
				character.move({ x: dx, y: dy, z: 0 });

				animateCharacter(character);
				character.animationState++;

				scenechanged = true;
			}

			// remove target sign if character got there
			if (target && !move) {
				target = null;
				scenechanged = true;
			}

			if (scenechanged) {
				scenechanged = false;

				// calculate sheets and draw scene
				sheetengine.calc.calculateChangedSheets();
				sheetengine.drawing.drawScene();

				if (target) {
					// draw an X to target location
					var ctx = sheetengine.context;
					ctx.save();
					ctx.scale(1, 0.5);
					ctx.lineWidth = 3;
					ctx.globalAlpha = 0.5;
					ctx.strokeStyle = '#FFF';
					var puv = sheetengine.drawing.getPointuv(target);
					ctx.beginPath();
					ctx.moveTo(puv.u - 5, puv.v * 2 - 5);
					ctx.lineTo(puv.u + 5, puv.v * 2 + 5);
					ctx.moveTo(puv.u + 5, puv.v * 2 - 5);
					ctx.lineTo(puv.u - 5, puv.v * 2 + 5);
					ctx.stroke();
					ctx.restore();
				}

				if (hover) {
					var ctx = sheetengine.context;
					ctx.save();
					ctx.lineWidth = 1;
					ctx.globalAlpha = 0.8;
					ctx.strokeStyle = '#FFF';
					var ouv = sheetengine.drawing.getPointuv(obj.centerp);
					ctx.strokeRect(Math.round(ouv.u) - 20, Math.round(ouv.v) - 30, 40, 40);
					ctx.restore();
				}
			}
		};
		setInterval(mainloop, 30);


		/*var iso = new Isomer(document.getElementById("canvas"));
		var Point = Isomer.Point;
		var Path = Isomer.Path;
		var Shape = Isomer.Shape;
		var Vector = Isomer.Vector;
		var Color = Isomer.Color;
		var Red = new Color(160, 60, 50);
		var Blue = new Color(50, 60, 160);
		var Green = new Color(0, 128, 0)*/

		

		
		console.log("test");
		var url = '@Url.Action("Get","Layout", new { id = 5 })';

		 $.ajax({
				type: 'GET',
				url: url,
				dataType: 'json',
				success: function (item) {

					/*
					var iso = new Isomer(document.getElementById("canvas"));
					iso.add(Shape.Prism(Point.ORIGIN, item.width, item.length, 0.2));
					console.log("success");
					console.log(item);
					

						console.log(item.id);
						console.log(item);

						console.log("and the tiles");

						console.log(item.tiles);

						//ok how the shading works is EXTREMELY STUPID
						//to avoid transparency you have to do decreasing #todo
						/*
						iso.add(cube.translate(0, 0, 0), blue);
						iso.add(cube.translate(0, -1, 0), blue);
						iso.add(cube.translate(0, -2, 0), blue); like so basically i have to pain the ones closest to me last
						var cube = Shape.Prism(Point.ORIGIN);
						iso.add(cube);
						$.each(item.tiles, function (j, tile) {

							if (tile.z == 0) {
								
								console.log("creating new cube with iso at" + tile.x + " " + tile.y + " " + (tile.z + 1));
								console.log(iso);

								iso.add(cube.translate(item.length + (tile.x * -1), 0, 0), Green);
							}
						});

						*/

					

				},
				error: function (ex) {
					console.log("failure" + ex);
					var r = jQuery.parseJSON(response.responseText);
					alert("Message: " + r.Message);
					alert("StackTrace: " + r.StackTrace);
					alert("ExceptionType: " + r.ExceptionType);
				}
		});
		/*
		$.getJSON(url, function (data) {
			var items = [];
			$.each(data, function (key, val) {
				items.push("<li id='" + key + "'>" + val + "</li>");
			});

			$("<ul/>", {
				"class": "my-new-list",
				html: items.join("")
			}).appendTo("body");
		});*/



		//now post

		console.log("now post");



		class Tile {
			constructor(name) {
				this.name = name;
			}
		}

		class Layout {
			constructor(height, width, tiles) {
				this.height = height;
				this.width = width;
				this.tiles = tiles;
			}
		}

		

		var tiles = new Array(2);
		tiles[0] = new Tile("grass");
		tiles[1] = new Tile("water");
		var layout = new Layout(10, 10, tiles);



		var datastring = JSON.stringify(layout)
		console.log(datastring);

		var url = '@Url.Action("Post","Layout")';

		$.ajax({
			type: "POST",
			url: url,
			data: datastring,
			dataType: "json",
			contentType: "application/json",
			success: function (data) {
			},
			error: function () {
			}
		});

	</script>
}